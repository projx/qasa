from logging.handlers import DatagramHandler, SocketHandler

from lib.base import *


########################################################################################################################
## Config Model - Uses pythantic to provide a typed-dict and validation
##

class QLogstashModel(QSenderModel):
    """
    Config attribs expected for Forwarders, note some attribs are inherited from QSenderModel
    """
    host: str
    port: int
    protocol: int

########################################################################################################################
##
##

class QLogstashSender(QSendConnector):
    """
    Logstash Send Connector

    This takes the output generated by a Format Connector, sending it to Logstash via UDP or TCP

    Connector config settings:
    alias: Name that to reference calls to this Sender, i.e. this will appear in the debug logs
    connector_class: lib.senders.logstash.QLogstashSender
    host: IP or Hostname of your Logstash reciever
    port: Port configured on your logstash receiver
    protocol: Protocol configured on your logstash receiver (i.e. udp or tcp, note must be lower case)
    """

    logger = False
    args = dict()

    def __init__(self, **args):
        self.args = QLogstashModel(**args)

        if self.arg.protocol == "udp":
            handler = UDPLogstashHandler(host=self.arg.host, port=self.arg.port)
        else:
            handler = TCPLogstashHandler(host=self.arg.host, port=self.arg.port)

        self.logger = logging.getLogger(self.arg["alias"])
        self.logger.setLevel(logging.INFO)
        self.logger.addHandler(handler)
        self.logger.propagate = False

    # def send(self, pc: QPollConnector, fc: QFormatConnector):
    #     for item in fc.results:
    #         applog.debug("{} Sending: {}".format(self.args.alias, item))
    #         self.logger.info(item)

    def prerequisites(self, initiator):
        """
        Steps required to initiate a connection/query, for this particular class, the main requirement
        is to register and download the required MIBs
        """
        pass


########################################################################################################################
##
##


### The follow handlers were derived from the python-logstash library

# Derive from object to force a new-style class and thus allow super() to work
# on Python 2.6
class TCPLogstashHandler(SocketHandler, object):
    """Python logging handler for Logstash. Sends events over TCP.
    :param host: The host of the logstash server.
    :param port: The port of the logstash server (default 5959).
    :param message_type: The type of the message (default logstash).
    :param fqdn; Indicates whether to show fully qualified domain name or not (default False).
    :param version: version of logstash event schema (default is 0).
    :param tags: list of tags for a logger (default is None).
    """

    def __init__(self, host, port=5959, message_type='logstash', tags=None, fqdn=False, version=0):
        super(TCPLogstashHandler, self).__init__(host, port)

    #        if version == 1:
    #            self.formatter = formatter.LogstashFormatterVersion1(message_type, tags, fqdn)
    #        else:
    #            self.formatter = formatter.LogstashFormatterVersion0(message_type, tags, fqdn)

    def makePickle(self, record):
        return str.encode(record.msg) + b'\n'


class UDPLogstashHandler(TCPLogstashHandler, DatagramHandler):
    """Python logging handler for Logstash. Sends events over UDP.
    :param host: The host of the logstash server.
    :param port: The port of the logstash server (default 5959).
    :param message_type: The type of the message (default logstash).
    :param fqdn; Indicates whether to show fully qualified domain name or not (default False).
    :param version: version of logstash event schema (default is 0).
    :param tags: list of tags for a logger (default is None).
    """

    def makePickle(self, record):
        return str.encode(record.msg) + b'\n'
